{"name":"JavaQ","tagline":"Java DSL for SQL","body":"JavaQ\r\n=======\r\n[![Build Status](https://travis-ci.org/vivekmittal/javaq.svg?branch=master)](https://travis-ci.org/vivekmittal/javaq)\r\n[![Maven Release](https://img.shields.io/github/release/vivekmittal/javaq.svg?label=maven)](https://jitpack.io/#vivekmittal/javaq/v1.0.0)\r\n[![License](http://img.shields.io/:license-mit-blue.svg)](https://github.com/vivekmittal/javaq/blob/master/LICENSE)\r\n\r\n<b><i>Java DSL for SQL</i></b>\r\n\r\nJavaQ takes care of building the sql query for you, rescuing you from the pain of remembering syntax for different dialects. With Java's static typing, JavaQ reduces the chances of making structural mistakes in the query.\r\n\r\nAdd javaq to your project\r\n-------\r\n\r\nRepository\r\n\r\n    <repository>\r\n\t    <id>jitpack.io</id>\r\n\t    <url>https://jitpack.io</url>\r\n\t</repository>\r\n\r\nDependency\r\n\r\n\t<dependency>\r\n\t    <groupId>com.github.vivekmittal</groupId>\r\n\t    <artifactId>javaq</artifactId>\r\n\t    <version>v1.0.0</version>\r\n\t</dependency>\r\n\r\nUsing JavaQ\r\n-------\r\nimport static com.javaq.JavaQ.select;\r\n\r\n<b>Select All</b>\r\n<pre>\r\n    select().from(\"EMPLOYEE\").sql() \r\n</pre>\r\n\r\n<b>Where Clause</b>\r\n<pre>\r\n    select(\"ID\", \"NAME\").from(\"EMPLOYEE\").where(\"ID = 1\").sql()\r\n</pre>\r\n\r\n<b>Operators (AND/OR/LIKE/IN)</b>\r\n- AND/OR\r\n<pre>\r\n    select(\"ID\", \"NAME\").from(\"EMPLOYEE\")\r\n        .where(\"ID = 1\").and(\"NAME = 'BATMAN'\")\r\n        .sql()\r\n</pre>\r\n<pre>\r\n    select(\"ID\", \"NAME\").from(\"EMPLOYEE\")\r\n        .where(\"ID = 1\").or(\"NAME = 'BATMAN'\")\r\n        .sql()\r\n</pre>\r\n- IN\r\n<pre>\r\n    select(\"ID\", \"NAME\").from(\"EMPLOYEE\")\r\n        .where(\"ID\")\r\n          .in(select(\"ID\").from(\"AWARD_WINNERS\"))\r\n        .or(\"NAME = 'BATMAN'\")\r\n        .sql()\r\n</pre>\r\n<pre>\r\n    select(\"ID\", \"NAME\").from(\"EMPLOYEE\")\r\n        .where(\"ID\").in(\"1\", \"2\")\r\n        .sql()\r\n</pre>\r\n- LIKE\r\n<pre>\r\n    select(\"ID\", \"NAME\").from(\"EMPLOYEE\")\r\n        .where(\"NAME\").like(\"%BATMAN%\")\r\n        .sql()\r\n</pre>\r\n\r\n<b>Joins</b>\r\n- INNER JOIN\r\n<pre>\r\n    select(\"ID\", \"NAME\").from(\"EMPLOYEE\")\r\n        .join(\"ADDRESS\").on(\"ADDRESS.ID = EMPLOYEE.ADDRESS_ID\")\r\n        .where(\"ID = 1\").or(\"NAME = 'BATMAN'\")\r\n        .sql()\r\n</pre>\r\n- LEFT JOIN\r\n<pre>\r\n    select(\"ID\", \"NAME\").from(\"EMPLOYEE\")\r\n        .leftJoin(\"ADDRESS\").on(\"ADDRESS.ID = EMPLOYEE.ADDRESS_ID\")\r\n        .where(\"ID = 1\").or(\"NAME = 'BATMAN'\")\r\n        .sql()\r\n</pre>\r\n\r\n<b>Order By</b>\r\n<pre>\r\n    select(\"ID\", \"NAME\").from(\"EMPLOYEE\")\r\n        .orderBy(\"ID\", Order.OrderType.ASC)\r\n        .sql()\r\n</pre>\r\n\r\n<b>Group By</b>\r\n<pre>\r\n    select(\"NAME\", \"COUNT(*)\").from(\"EMPLOYEE\")\r\n        .groupBy(\"NAME\")\r\n        .orderBy(\"COUNT(*)\", ASC)\r\n        .sql()\r\n</pre>\r\n\r\n<b>Limit</b>\r\n<pre>\r\n    select(\"NAME\", \"COUNT(*)\").from(\"EMPLOYEE\")\r\n          .groupBy(\"NAME\")\r\n          .orderBy(\"COUNT(*)\", ASC)\r\n          .limit(10)\r\n          .sql()\r\n</pre>\r\n\r\nWhat's next?\r\n-------\r\n- Generate queries for different SQL Dialects\r\n- Integrate with JDBC APIs\r\n- Generate update queries\r\n\r\nCONTRIBUTING\r\n-------\r\nInterested in contributing to JavaQ ? Here are some ways you can do that\r\n- Raise issues/bugs\r\n- Update documentation\r\n- Contribute in open issues/improvements/features\r\n- Any new ideas\r\n\r\nFeel free to raise pull requests :)\r\n\r\nLICENSE\r\n-------\r\nMIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}